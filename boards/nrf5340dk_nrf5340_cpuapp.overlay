&pinctrl {
	pwm1_default: pwm1_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT2, 0, 14)>;
			nordic,invert;
		};
	};

	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT2, 0, 14)>;
			low-power-enable;
		};
	};

	pwm2_default: pwm2_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT3, 0, 15)>;
			nordic,invert;
		};
	};

	pwm2_sleep: pwm2_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT3, 0, 15)>;
			low-power-enable;
		};
	};

};


/ {
	chosen {
		zephyr,console = &cdc_acm_uart0;
		zephyr,shell-uart = &cdc_acm_uart0;
	};

	pwmleds {
		pwm_led1: pwm_led_1 {
			pwms = <&pwm2 2 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
		pwm_led2: pwm_led_2 {
			pwms = <&pwm3 3 PWM_MSEC(20) PWM_POLARITY_INVERTED>;
		};
	};

	battery-divider {
		compatible = "voltage-divider";
		status = "okay";
		io-channels = <&adc 12>; // Measure VDDHDIV5
		output-ohms = <1>;
		full-ohms = <2>;
	};
};

&i2c0 {
	compatible = "nordic,nrf-twim";
	zephyr,concat-buf-size = <255>; // probable max for nrf52832
	zephyr,flash-buf-max-size = <255>; // probable max for nrf52832
	clock-frequency = <I2C_BITRATE_FAST>;

	imu: imu@0 { // any address out of range (00, 7f, etc. will search all addresses and stored address first if available, specify an address here to search first otherwise
		compatible = "i2c-device";
		label = "imu";
		reg = <0>;
	};

	mag: mag@0 {
		compatible = "i2c-device";
		label = "mag";
		reg = <0>;
	};

};

&pwm2 {
	status = "okay";
	pinctrl-0 = <&pwm1_default>;
	pinctrl-1 = <&pwm1_sleep>;
	pinctrl-names = "default", "sleep";
};

&pwm3 {
	status = "okay";
	pinctrl-0 = <&pwm2_default>;
	pinctrl-1 = <&pwm2_sleep>;
	pinctrl-names = "default", "sleep";
};

zephyr_udc0: &usbd {
	cdc_acm_uart0: cdc_acm_uart0 {
		compatible = "zephyr,cdc-acm-uart";
	};
};
